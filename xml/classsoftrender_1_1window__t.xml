<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classsoftrender_1_1window__t" kind="class" language="C++" prot="public">
    <compoundname>softrender::window_t</compoundname>
    <includes local="no">softrender.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1a549973a71b40e61bc411a741469a3b1a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref> &gt;</type>
        <definition>std::vector&lt;pixel_t&gt; softrender::window_t::m_canvas</definition>
        <argsstring></argsstring>
        <name>m_canvas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="97" column="1" bodyfile="src/include/softrender.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1a4f367993c59ad9849a519eec914f4035" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int softrender::window_t::m_width</definition>
        <argsstring></argsstring>
        <name>m_width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="99" column="1" bodyfile="src/include/softrender.hpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1a4aa0cf682010f0a83e3b3946b25db760" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int softrender::window_t::m_height</definition>
        <argsstring></argsstring>
        <name>m_height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="100" column="1" bodyfile="src/include/softrender.hpp" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1a3b1172da8bd33ab3b6c418fc1a0e6281" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool softrender::window_t::m_running</definition>
        <argsstring></argsstring>
        <name>m_running</name>
        <initializer>{ true }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="101" column="1" bodyfile="src/include/softrender.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1a6042d51210c551ccb511798592580022" prot="private" static="no" mutable="no">
        <type>SDL_Window *</type>
        <definition>SDL_Window* softrender::window_t::m_window</definition>
        <argsstring></argsstring>
        <name>m_window</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="103" column="1" bodyfile="src/include/softrender.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1acd5773b6c80e51d32678f0360d7fe7ff" prot="private" static="no" mutable="no">
        <type>SDL_Renderer *</type>
        <definition>SDL_Renderer* softrender::window_t::m_renderer</definition>
        <argsstring></argsstring>
        <name>m_renderer</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="104" column="1" bodyfile="src/include/softrender.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1ab5da848ee6e182639651cd6baf50dbda" prot="private" static="no" mutable="no">
        <type>SDL_Texture *</type>
        <definition>SDL_Texture* softrender::window_t::m_texture</definition>
        <argsstring></argsstring>
        <name>m_texture</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="105" column="1" bodyfile="src/include/softrender.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a584e74ce129b322137baef1b9ae12d2d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void softrender::window_t::construct_canvas</definition>
        <argsstring>()</argsstring>
        <name>construct_canvas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="107" column="1" bodyfile="src/softrender.cpp" bodystart="239" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a4195083bc30575095db12535a814bb67" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void softrender::window_t::initialize_sdl</definition>
        <argsstring>()</argsstring>
        <name>initialize_sdl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="108" column="1" bodyfile="src/softrender.cpp" bodystart="234" bodyend="237"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a578408fc92b352eeb7807b9883207223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>softrender::window_t::window_t</definition>
        <argsstring>()</argsstring>
        <name>window_t</name>
        <briefdescription>
<para>Constructs a window with width=640, height=480. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="114" column="1" bodyfile="src/softrender.cpp" bodystart="250" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a305403fb8b923e8d4c2811000b43898f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>softrender::window_t::window_t</definition>
        <argsstring>(int const t_width, int const t_height)</argsstring>
        <name>window_t</name>
        <param>
          <type>int const</type>
          <declname>t_width</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>t_height</declname>
        </param>
        <briefdescription>
<para>Constructs a window with <computeroutput>t_width</computeroutput> width and <computeroutput>t_height</computeroutput> height. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="119" column="1" bodyfile="src/softrender.cpp" bodystart="258" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a57348c74e2f5f709364cce9d66dc8118" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>softrender::window_t::~window_t</definition>
        <argsstring>() noexcept</argsstring>
        <name>~window_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="120" column="1" bodyfile="src/softrender.cpp" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a484ea262a12ec122fb0554bac1cc5c3a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int softrender::window_t::width</definition>
        <argsstring>() const noexcept</argsstring>
        <name>width</name>
        <briefdescription>
<para>Get width of constructed window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="125" column="1" bodyfile="src/softrender.cpp" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a57d86dc99bea44e6739906814a4324cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int softrender::window_t::height</definition>
        <argsstring>() const noexcept</argsstring>
        <name>height</name>
        <briefdescription>
<para>Get height of constructed window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="129" column="1" bodyfile="src/softrender.cpp" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1ac497299341c58212a213bb9c42d673d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void softrender::window_t::draw</definition>
        <argsstring>()</argsstring>
        <name>draw</name>
        <briefdescription>
<para>Draws everything to the screen and handles input. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>There are no separate functions (yet) to retreive events to keep the code simple, but when the need arises they will be added to the class. Currently, if you press ESCAPE the application exits. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="139" column="1" bodyfile="src/softrender.cpp" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="group__unchecked__release_1gaac82df2f52fc4910a4edd434299d41aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void softrender::window_t::draw_point</definition>
        <argsstring>(int const t_i, int const t_j, pixel_t const &amp;t_pixel)</argsstring>
        <name>draw_point</name>
        <param>
          <type>int const</type>
          <declname>t_i</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>t_j</declname>
        </param>
        <param>
          <type><ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref> const &amp;</type>
          <declname>t_pixel</declname>
        </param>
        <briefdescription>
<para>Draws a point at coordinate (x=<computeroutput>t_j</computeroutput>, y=<computeroutput>t_i</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_i</parametername>
</parameternamelist>
<parameterdescription>
<para>The line on which the pixel will be put. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_j</parametername>
</parameternamelist>
<parameterdescription>
<para>The column on which the pixel will be put. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>The color of the point. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="150" column="1" bodyfile="src/softrender.cpp" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="group__unchecked__release_1ga8faaf71a333a866b4239f4f70a30748d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void softrender::window_t::draw_point</definition>
        <argsstring>(point_t const &amp;t_point, pixel_t const &amp;t_pixel)</argsstring>
        <name>draw_point</name>
        <param>
          <type><ref refid="structsoftrender_1_1point__t" kindref="compound">point_t</ref> const &amp;</type>
          <declname>t_point</declname>
        </param>
        <param>
          <type><ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref> const &amp;</type>
          <declname>t_pixel</declname>
        </param>
        <briefdescription>
<para>Draws a point using a more traditional approach(x and y coordinates instead of lines and columns in a matrix). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="158" column="1" bodyfile="src/softrender.cpp" bodystart="291" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="group__unchecked__release_1ga8e9d90ce55a5fb4f1b7850424488b9f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool softrender::window_t::closed</definition>
        <argsstring>() const noexcept</argsstring>
        <name>closed</name>
        <briefdescription>
<para>Returns true if the window will close. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If you press ESCAPE the application terminates. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="167" column="1" bodyfile="src/softrender.cpp" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="group__unchecked__release_1ga596f8c68a7658af6e6507cf2e53b48a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref> &amp;</type>
        <definition>pixel_t &amp; softrender::window_t::operator()</definition>
        <argsstring>(int const t_i, int const t_j)</argsstring>
        <name>operator()</name>
        <param>
          <type>int const</type>
          <declname>t_i</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>t_j</declname>
        </param>
        <briefdescription>
<para>Access the rgba value at line=<computeroutput>t_i</computeroutput> and column=<computeroutput>t_j</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_i</parametername>
</parameternamelist>
<parameterdescription>
<para>Line of the inner rgba matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_j</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the inner rgba matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="177" column="1" bodyfile="src/softrender.cpp" bodystart="301" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="group__unchecked__release_1gaf85611ce1212eb525f069b8abf219728" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref> const  &amp;</type>
        <definition>pixel_t const  &amp; softrender::window_t::operator()</definition>
        <argsstring>(int const t_i, int const t_j) const</argsstring>
        <name>operator()</name>
        <param>
          <type>int const</type>
          <declname>t_i</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>t_j</declname>
        </param>
        <briefdescription>
<para>Get a const reference to the rgba value at line=<computeroutput>t_i</computeroutput> and column=<computeroutput>t_j</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_i</parametername>
</parameternamelist>
<parameterdescription>
<para>Line of the inner rgba matrix. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_j</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the inner rgba matrix. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="187" column="1" bodyfile="src/softrender.cpp" bodystart="312" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="group__canvas__manipulation_1gaf2073a517c81aec00df814271b6b5696" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int softrender::window_t::from_coord2d_to_matrix</definition>
        <argsstring>(point_t const &amp;t_point) const noexcept</argsstring>
        <name>from_coord2d_to_matrix</name>
        <param>
          <type><ref refid="structsoftrender_1_1point__t" kindref="compound">point_t</ref> const &amp;</type>
          <declname>t_point</declname>
        </param>
        <briefdescription>
<para>Returns corresponding position in the rgba matrix of a point <computeroutput>t_point</computeroutput> as if the canvas was a 2d matrix. </para>        </briefdescription>
        <detaileddescription>
<para>With this you could say:</para><para><programlisting><codeline><highlight class="normal">this-&gt;<ref refid="group__canvas__manipulation_1ga8b326ad27b1240d66e5ddf5124a544ab" kindref="member">canvas</ref>()[this-&gt;<ref refid="group__canvas__manipulation_1gaf2073a517c81aec00df814271b6b5696" kindref="member">from_coord2d_to_matrix</ref>({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>x=20,<sp/>y=30</highlight></codeline>
<codeline><highlight class="normal">})];</highlight></codeline>
</programlisting></para><para>which is equivalent to this:</para><para><programlisting><codeline><highlight class="normal">this-&gt;<ref refid="group__unchecked__release_1ga596f8c68a7658af6e6507cf2e53b48a4" kindref="member">operator()</ref>(x=20,<sp/>y=30);</highlight></codeline>
</programlisting></para><para>This will (hopefully) be useful for further optimizations for different algorithms(for example: draw_rect). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="212" column="1" bodyfile="src/softrender.cpp" bodystart="323" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="group__canvas__manipulation_1ga8b326ad27b1240d66e5ddf5124a544ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref> &gt; &amp;</type>
        <definition>std::vector&lt; pixel_t &gt; &amp; softrender::window_t::canvas</definition>
        <argsstring>() noexcept</argsstring>
        <name>canvas</name>
        <briefdescription>
<para>Returns the underlying canvas/matrix with rgba values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="220" column="1" bodyfile="src/softrender.cpp" bodystart="328" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="group__canvas__manipulation_1ga8d1cbb1d16eccd6fddfc9ff7e0b3adc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref> &gt; const  &amp;</type>
        <definition>std::vector&lt; pixel_t &gt; const  &amp; softrender::window_t::canvas</definition>
        <argsstring>() const noexcept</argsstring>
        <name>canvas</name>
        <briefdescription>
<para>Returns the underlying canvas/matrix with rgba values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="226" column="1" bodyfile="src/softrender.cpp" bodystart="333" bodyend="336"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Use this to construct a window. </para>    </briefdescription>
    <detaileddescription>
<para>This is just a wrapper around SDL to construct a surface from memory and blit it.</para><para>Use SOFTRENDER_MOCKING if you want to disable drawing to the screen. </para>    </detaileddescription>
    <location file="src/include/softrender.hpp" line="95" column="1" bodyfile="src/include/softrender.hpp" bodystart="94" bodyend="227"/>
    <listofallmembers>
      <member refid="group__canvas__manipulation_1ga8b326ad27b1240d66e5ddf5124a544ab" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>canvas</name></member>
      <member refid="group__canvas__manipulation_1ga8d1cbb1d16eccd6fddfc9ff7e0b3adc4" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>canvas</name></member>
      <member refid="group__unchecked__release_1ga8e9d90ce55a5fb4f1b7850424488b9f1" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>closed</name></member>
      <member refid="classsoftrender_1_1window__t_1a584e74ce129b322137baef1b9ae12d2d" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>construct_canvas</name></member>
      <member refid="classsoftrender_1_1window__t_1ac497299341c58212a213bb9c42d673d8" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>draw</name></member>
      <member refid="group__unchecked__release_1gaac82df2f52fc4910a4edd434299d41aa" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>draw_point</name></member>
      <member refid="group__unchecked__release_1ga8faaf71a333a866b4239f4f70a30748d" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>draw_point</name></member>
      <member refid="group__canvas__manipulation_1gaf2073a517c81aec00df814271b6b5696" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>from_coord2d_to_matrix</name></member>
      <member refid="classsoftrender_1_1window__t_1a57d86dc99bea44e6739906814a4324cf" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>height</name></member>
      <member refid="classsoftrender_1_1window__t_1a4195083bc30575095db12535a814bb67" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>initialize_sdl</name></member>
      <member refid="classsoftrender_1_1window__t_1a549973a71b40e61bc411a741469a3b1a" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_canvas</name></member>
      <member refid="classsoftrender_1_1window__t_1a4aa0cf682010f0a83e3b3946b25db760" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_height</name></member>
      <member refid="classsoftrender_1_1window__t_1acd5773b6c80e51d32678f0360d7fe7ff" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_renderer</name></member>
      <member refid="classsoftrender_1_1window__t_1a3b1172da8bd33ab3b6c418fc1a0e6281" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_running</name></member>
      <member refid="classsoftrender_1_1window__t_1ab5da848ee6e182639651cd6baf50dbda" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_texture</name></member>
      <member refid="classsoftrender_1_1window__t_1a4f367993c59ad9849a519eec914f4035" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_width</name></member>
      <member refid="classsoftrender_1_1window__t_1a6042d51210c551ccb511798592580022" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_window</name></member>
      <member refid="group__unchecked__release_1ga596f8c68a7658af6e6507cf2e53b48a4" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>operator()</name></member>
      <member refid="group__unchecked__release_1gaf85611ce1212eb525f069b8abf219728" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>operator()</name></member>
      <member refid="classsoftrender_1_1window__t_1a484ea262a12ec122fb0554bac1cc5c3a" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>width</name></member>
      <member refid="classsoftrender_1_1window__t_1a578408fc92b352eeb7807b9883207223" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>window_t</name></member>
      <member refid="classsoftrender_1_1window__t_1a305403fb8b923e8d4c2811000b43898f" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>window_t</name></member>
      <member refid="classsoftrender_1_1window__t_1a57348c74e2f5f709364cce9d66dc8118" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>~window_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
