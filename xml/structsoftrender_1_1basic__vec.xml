<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structsoftrender_1_1basic__vec" kind="struct" language="C++" prot="public">
    <compoundname>softrender::basic_vec</compoundname>
    <derivedcompoundref refid="structsoftrender_1_1vec" prot="public" virt="non-virtual">softrender::vec&lt; Size, T &gt;</derivedcompoundref>
    <includes local="no">vec.hpp</includes>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>Size</declname>
        <defname>Size</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="structsoftrender_1_1basic__vec_1a3e1bda51041f0f63004a0029674125a1" prot="private" static="yes" mutable="no">
        <type>constexpr T</type>
        <definition>constexpr T softrender::basic_vec&lt; Size, T &gt;::m_default_value</definition>
        <argsstring></argsstring>
        <name>m_default_value</name>
        <initializer>{ static_cast&lt;unsigned char&gt;(0) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="22" column="1" bodyfile="src/include/vec.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="structsoftrender_1_1basic__vec_1ad6feeba06b7702957e0626d8905204b5" prot="protected" static="no" mutable="no">
        <type>std::array&lt; T, Size &gt;</type>
        <definition>std::array&lt;T, Size&gt; softrender::basic_vec&lt; Size, T &gt;::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="25" column="1" bodyfile="src/include/vec.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a25ac293a366b37ba552d9aecf753d5a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>softrender::basic_vec&lt; Size, T &gt;::basic_vec</definition>
        <argsstring>() noexcept</argsstring>
        <name>basic_vec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="28" column="1" bodyfile="src/include/vec.hpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1aeef9d45cde50e39eba0a5bb2099356cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>softrender::basic_vec&lt; Size, T &gt;::basic_vec</definition>
        <argsstring>(Ts const ... t_args) noexcept</argsstring>
        <name>basic_vec</name>
        <param>
          <type>Ts const ...</type>
          <declname>t_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="33" column="1" bodyfile="src/include/vec.hpp" bodystart="33" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a0e2c7e5af80ea8c42534695e4a41f06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>softrender::basic_vec&lt; Size, T &gt;::basic_vec</definition>
        <argsstring>(basic_vec const &amp;) noexcept=default</argsstring>
        <name>basic_vec</name>
        <param>
          <type><ref refid="structsoftrender_1_1basic__vec" kindref="compound">basic_vec</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1ac454cb6b2c5ac917815c3368185d1ec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>softrender::basic_vec&lt; Size, T &gt;::basic_vec</definition>
        <argsstring>(basic_vec &amp;&amp;) noexcept=default</argsstring>
        <name>basic_vec</name>
        <param>
          <type><ref refid="structsoftrender_1_1basic__vec" kindref="compound">basic_vec</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1ac068316d0bb995a7a6143c35c2461047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>softrender::basic_vec&lt; Size, T &gt;::~basic_vec</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~basic_vec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a4ef01a8ab7f79b5f2eadab97e164db71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::operator=</definition>
        <argsstring>(basic_vec const &amp;) noexcept -&gt; basic_vec &amp;=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structsoftrender_1_1basic__vec" kindref="compound">basic_vec</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a3272fecc510d0726f5e344c580545475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::operator=</definition>
        <argsstring>(basic_vec &amp;) noexcept -&gt; basic_vec &amp;=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structsoftrender_1_1basic__vec" kindref="compound">basic_vec</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1af07caf1a439ea02b14d2d709872e6237" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::operator[]</definition>
        <argsstring>(int const t_index) const noexcept -&gt; T const &amp;</argsstring>
        <name>operator[]</name>
        <param>
          <type>int const</type>
          <declname>t_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="52" column="1" bodyfile="src/include/vec.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1aff41b09f1c47f43582bca2693c1b0802" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::operator[]</definition>
        <argsstring>(int const t_index) noexcept -&gt; T &amp;</argsstring>
        <name>operator[]</name>
        <param>
          <type>int const</type>
          <declname>t_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="56" column="1" bodyfile="src/include/vec.hpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a2dd92d45f60e1fd26ad089ce2463cef1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::data</definition>
        <argsstring>() const noexcept -&gt; T *</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="61" column="1" bodyfile="src/include/vec.hpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1ad27bd2fd473f3352df6baf8969e0ab96" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto softrender::basic_vec&lt; Size, T &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="66" column="1" bodyfile="src/include/vec.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a0247ef036b50c267036c038eb1d382c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::norm</definition>
        <argsstring>() const noexcept -&gt; decltype(std::sqrt(m_default_value))</argsstring>
        <name>norm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="71" column="1" bodyfile="src/include/vec.hpp" bodystart="71" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1ade46a89dd235ad0d9db16d3ef5043c96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::normalize</definition>
        <argsstring>(T const t_l=1) noexcept -&gt; basic_vec &amp;</argsstring>
        <name>normalize</name>
        <param>
          <type>T const</type>
          <declname>t_l</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="82" column="1" bodyfile="src/include/vec.hpp" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a7f782a5dcc42fb713dc54154b7bc4250" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::operator*</definition>
        <argsstring>(double const t_factor) const noexcept -&gt; basic_vec&lt; Size, T &gt;</argsstring>
        <name>operator*</name>
        <param>
          <type>double const</type>
          <declname>t_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="88" column="1" bodyfile="src/include/vec.hpp" bodystart="88" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a0efbddbd263a2eb6fae307413c18a290" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::operator*</definition>
        <argsstring>(float const t_factor) const noexcept -&gt; basic_vec&lt; Size, T &gt;</argsstring>
        <name>operator*</name>
        <param>
          <type>float const</type>
          <declname>t_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="98" column="1" bodyfile="src/include/vec.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a24fe6747049c3055d18887e9d629879f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::operator*</definition>
        <argsstring>(int const t_factor) const noexcept -&gt; basic_vec&lt; Size, T &gt;</argsstring>
        <name>operator*</name>
        <param>
          <type>int const</type>
          <declname>t_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="102" column="1" bodyfile="src/include/vec.hpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a615e8373060045bcd49d3d1b4fb18fa7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::operator*</definition>
        <argsstring>(basic_vec const &amp;t_vec) const noexcept -&gt; T</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structsoftrender_1_1basic__vec" kindref="compound">basic_vec</ref> const &amp;</type>
          <declname>t_vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="107" column="1" bodyfile="src/include/vec.hpp" bodystart="107" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a335d6c3c4f581a4c569de191ff5161ae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::operator+</definition>
        <argsstring>(basic_vec const &amp;t_vec) const noexcept -&gt; basic_vec&lt; Size, T &gt;</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structsoftrender_1_1basic__vec" kindref="compound">basic_vec</ref> const &amp;</type>
          <declname>t_vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="118" column="1" bodyfile="src/include/vec.hpp" bodystart="118" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a6cd4735dbf8a4738e2419755b3aaebc9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::operator-</definition>
        <argsstring>(basic_vec const &amp;t_vec) const noexcept -&gt; basic_vec&lt; Size, T &gt;</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="structsoftrender_1_1basic__vec" kindref="compound">basic_vec</ref> const &amp;</type>
          <declname>t_vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="128" column="1" bodyfile="src/include/vec.hpp" bodystart="128" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a64f3a211beebcd8e43fec8edd1c3f06c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>OtherSize</declname>
            <defname>OtherSize</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::operator==</definition>
        <argsstring>(basic_vec&lt; OtherSize, T &gt; const &amp;t_other) const noexcept -&gt; bool</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structsoftrender_1_1basic__vec" kindref="compound">basic_vec</ref>&lt; OtherSize, T &gt; const &amp;</type>
          <declname>t_other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="140" column="1" bodyfile="src/include/vec.hpp" bodystart="140" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="structsoftrender_1_1basic__vec_1a424c46eb3b6eb5116455df890a2f698c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::basic_vec&lt; Size, T &gt;::operator!=</definition>
        <argsstring>(basic_vec const &amp;t_other) const noexcept -&gt; bool</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structsoftrender_1_1basic__vec" kindref="compound">basic_vec</ref> const &amp;</type>
          <declname>t_other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="157" column="1" bodyfile="src/include/vec.hpp" bodystart="157" bodyend="160"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="0">
        <label>softrender::basic_vec&lt; Size, T &gt;</label>
        <link refid="structsoftrender_1_1basic__vec"/>
      </node>
      <node id="1">
        <label>softrender::vec&lt; Size, T &gt;</label>
        <link refid="structsoftrender_1_1vec"/>
        <childnode refid="0" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="src/include/vec.hpp" line="16" column="1" bodyfile="src/include/vec.hpp" bodystart="15" bodyend="161"/>
    <listofallmembers>
      <member refid="structsoftrender_1_1basic__vec_1a25ac293a366b37ba552d9aecf753d5a0" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>basic_vec</name></member>
      <member refid="structsoftrender_1_1basic__vec_1aeef9d45cde50e39eba0a5bb2099356cd" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>basic_vec</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a0e2c7e5af80ea8c42534695e4a41f06b" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>basic_vec</name></member>
      <member refid="structsoftrender_1_1basic__vec_1ac454cb6b2c5ac917815c3368185d1ec8" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>basic_vec</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a2dd92d45f60e1fd26ad089ce2463cef1" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>data</name></member>
      <member refid="structsoftrender_1_1basic__vec_1ad6feeba06b7702957e0626d8905204b5" prot="protected" virt="non-virtual"><scope>softrender::basic_vec</scope><name>m_data</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a3e1bda51041f0f63004a0029674125a1" prot="private" virt="non-virtual"><scope>softrender::basic_vec</scope><name>m_default_value</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a0247ef036b50c267036c038eb1d382c3" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>norm</name></member>
      <member refid="structsoftrender_1_1basic__vec_1ade46a89dd235ad0d9db16d3ef5043c96" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>normalize</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a424c46eb3b6eb5116455df890a2f698c" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>operator!=</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a7f782a5dcc42fb713dc54154b7bc4250" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>operator*</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a0efbddbd263a2eb6fae307413c18a290" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>operator*</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a24fe6747049c3055d18887e9d629879f" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>operator*</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a615e8373060045bcd49d3d1b4fb18fa7" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>operator*</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a335d6c3c4f581a4c569de191ff5161ae" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>operator+</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a6cd4735dbf8a4738e2419755b3aaebc9" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>operator-</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a4ef01a8ab7f79b5f2eadab97e164db71" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>operator=</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a3272fecc510d0726f5e344c580545475" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>operator=</name></member>
      <member refid="structsoftrender_1_1basic__vec_1a64f3a211beebcd8e43fec8edd1c3f06c" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>operator==</name></member>
      <member refid="structsoftrender_1_1basic__vec_1af07caf1a439ea02b14d2d709872e6237" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>operator[]</name></member>
      <member refid="structsoftrender_1_1basic__vec_1aff41b09f1c47f43582bca2693c1b0802" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>operator[]</name></member>
      <member refid="structsoftrender_1_1basic__vec_1ad27bd2fd473f3352df6baf8969e0ab96" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>size</name></member>
      <member refid="structsoftrender_1_1basic__vec_1ac068316d0bb995a7a6143c35c2461047" prot="public" virt="non-virtual"><scope>softrender::basic_vec</scope><name>~basic_vec</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
