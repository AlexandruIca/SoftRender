trigger:
    tags:
        include:
        - v*
    branches:
        include:
        - master
        - development

variables:
    SOFTRENDER_VERSION: nightly

jobs:
    - job: Linux_Debug_GCC9
      pool:
          vmImage: 'ubuntu-16.04'
      variables:
          CODECOV_TOKEN: c3ade3e3-5a6c-4f0a-814c-0538338d1116
      steps:
      - script: |
          set -e
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt install -y gcc-9 g++-9
        displayName: Install gcc-9
      - script: |
          vcpkg install sdl2
        displayName: Install SDL2
      - script: |
          set -e
          mkdir build && cd build
          export CC=gcc-9
          export CXX=g++-9
          # Turn off undefined sanitizer because of ubuntu-16.04 bug
          cmake -DCMAKE_BUILD_TYPE=Debug \
                -DSOFTRENDER_COVERAGE=ON \
                -DSOFTRENDER_BUILD_TESTS=ON \
                -DSOFTRENDER_MOCKING=ON \
                -DSOFTRENDER_USE_ADDRESS_SANITIZER=ON \
                -DSOFTRENDER_USE_LEAK_SANITIZER=ON \
                -DSOFTRENDER_USE_UNDEFINED_SANITIZER=OFF \
                -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake ..
          cmake --build . --config Debug
        displayName: Build SoftRender and it's tests
      - script: |
          set -e
          cd build/tests/
          ctest -V
        displayName: Run the tests
      - script: |
          cd build/
          ../scripts/codecov-io-azure.sh
        displayName: Publish code coverage
    - job: Linux_Release_GCC9
      pool:
          vmImage: 'ubuntu-16.04'
      steps:
      - script: |
          set -e
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt install -y gcc-9 g++-9
        displayName: Install gcc-9
      - script: |
          set -e
          vcpkg install sdl2
        displayName: Install SDL2
      - script: |
          set -e
          mkdir build && cd build
          export CC=gcc-9
          export CXX=g++-9
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DSOFTRENDER_BUILD_TESTS=ON \
                -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake ..
          cmake --build . --config Release
        displayName: Build SoftRender and it's tests
      - script: |
          set -e
          cd build/
          cpack -G TGZ
        displayName: Package for linux.
    - job: Linux_Debug_Clang9
      pool:
          vmImage: 'ubuntu-16.04'
      steps:
      - script: |
          set -e
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          echo "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main" | sudo tee -a /etc/apt/sources.list
          echo "deb-src http://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main" | sudo tee -a /etc/apt/sources.list
          sudo apt update
          sudo apt install -y g++-9 clang-9 clang++-9 clang-tidy-9 clang-format-9
        displayName: Install clang-9 + tooling
      - script: |
          set -e
          vcpkg install sdl2
        displayName: Install SDL2
      - script: |
          set -e
          mkdir build && cd build/
          export CC=clang-9
          export CXX=clang++-9
          cmake -DCMAKE_BUILD_TYPE=Debug \
                -DSOFTRENDER_BUILD_TESTS=ON \
                -DSOFTRENDER_MOCKING=ON \
                -DSOFTRENDER_USE_ADDRESS_SANITIZER=ON \
                -DSOFTRENDER_USE_LEAK_SANITIZER=ON \
                -DSOFTRENDER_USE_UNDEFINED_SANITIZER=ON \
                -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
                -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake ..
          mv compile_commands.json ..
          cmake --build . --config Debug
        displayName: Build SoftRender and it's tests
      - script: |
          set -e
          cd build/tests/
          ctest -V
        displayName: Run the tests
      - script: |
          set -e
          ./scripts/run-clang-tidy.py -clang-tidy-binary=/usr/bin/clang-tidy-9
        displayName: Run clang-tidy
      - script: |
          set -e
          ./scripts/run-clang-format.py --clang-format-executable=/usr/bin/clang-format-9 -r src/ tests/
        displayName: Run clang-format
    - job: Linux_Release_Clang9
      pool:
          vmImage: 'ubuntu-16.04'
      steps:
      - script: |
          set -e
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          echo "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main" | sudo tee -a /etc/apt/sources.list
          echo "deb-src http://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main" | sudo tee -a /etc/apt/sources.list
          sudo apt update
          sudo apt install -y g++-9 clang-9 clang++-9
        displayName: Install clang-9 + tooling
      - script: |
          set -e
          vcpkg install sdl2
        displayName: Install SDL2
      - script: |
          set -e
          mkdir build && cd build/
          export CC=clang-9
          export CXX=clang++-9
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DSOFTRENDER_BUILD_TESTS=ON \
                -DCMAKE_TOOLCHAIN_FILE=/usr/local/share/vcpkg/scripts/buildsystems/vcpkg.cmake ..
          cmake --build . --config Release
        displayName: Build SoftRender and it's tests
    - job: Windows_Debug_VS2019_x64
      pool:
          vmImage: 'windows-2019'
      steps:
      - script: |
          vcpkg install sdl2:x64-windows
        displayName: Install SDL2
      - script: |
          mkdir build && cd build
          cmake -Ax64 ^
                -DCMAKE_BUILD_TYPE=Debug ^
                -DSOFTRENDER_BUILD_TESTS=ON ^
                -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%\scripts\buildsystems\vcpkg.cmake ..
          cmake --build . --config Debug
        displayName: Build SoftRender and it's tests
    - job: Windows_Release_VS2019_x64
      pool:
          vmImage: 'windows-2019'
      steps:
      - script: |
          vcpkg install sdl2:x64-windows
        displayName: Install SDL2
      - script: |
          mkdir build && cd build
          cmake -Ax64 ^
                -DCMAKE_BUILD_TYPE=Release ^
                -DSOFTRENDER_BUILD_TESTS=ON ^
                -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%\scripts\buildsystems\vcpkg.cmake ..
          cmake --build . --config Release
        displayName: Build SoftRender and it's tests
      - powershell: |
          cd build\
          del C:\ProgramData\Chocolatey\bin\cpack.exe
          cpack -G ZIP
        displayName: Package for windows
    - job: MacOS_Debug
      pool:
          vmImage: 'macOS-latest'
      steps:
      - script: |
          set -e
          brew install gcc
          pushd ~
          git clone "https://github.com/microsoft/vcpkg"
          cd vcpkg/
          ./bootstrap-vcpkg.sh
          ./vcpkg install sdl2
          popd
        displayName: Install vcpkg
      - script: |
          set -e
          mkdir build && cd build/
          cmake -DCMAKE_BUILD_TYPE=Debug \
                -DSOFTRENDER_BUILD_TESTS=ON \
                -DUSE_VCPKG_ON_MACOS=ON \
                -DCMAKE_TOOLCHAIN_FILE=~/vcpkg/scripts/buildsystems/vcpkg.cmake ..
          cmake --build . --config Debug
        displayName: Build SoftRender and it's tests
    - job: MacOS_Release
      pool:
          vmImage: 'macOS-latest'
      steps:
      - script: |
          set -e
          brew install gcc
          pushd ~
          git clone "https://github.com/microsoft/vcpkg"
          cd vcpkg/
          ./bootstrap-vcpkg.sh
          ./vcpkg install sdl2
          popd
        displayName: Install vcpkg
      - script: |
          set -e
          mkdir build && cd build/
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DSOFTRENDER_BUILD_TESTS=ON \
                -DUSE_VCPKG_ON_MACOS=ON \
                -DCMAKE_TOOLCHAIN_FILE=~/vcpkg/scripts/buildsystems/vcpkg.cmake ..
          cmake --build . --config Release
        displayName: Build SoftRender and it's tests
      - script: |
          set -e
          cd build/
          cpack --help
          cpack -G TGZ
        displayName: Package for MacOS
