<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classsoftrender_1_1window__t" kind="class" language="C++" prot="public">
    <compoundname>softrender::window_t</compoundname>
    <includes local="no">softrender.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1a549973a71b40e61bc411a741469a3b1a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref> &gt;</type>
        <definition>std::vector&lt;pixel_t&gt; softrender::window_t::m_canvas</definition>
        <argsstring></argsstring>
        <name>m_canvas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="153" column="17" bodyfile="src/include/softrender.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1a4f367993c59ad9849a519eec914f4035" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int softrender::window_t::m_width</definition>
        <argsstring></argsstring>
        <name>m_width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="155" column="9" bodyfile="src/include/softrender.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1a4aa0cf682010f0a83e3b3946b25db760" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int softrender::window_t::m_height</definition>
        <argsstring></argsstring>
        <name>m_height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="156" column="9" bodyfile="src/include/softrender.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1a3b1172da8bd33ab3b6c418fc1a0e6281" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool softrender::window_t::m_running</definition>
        <argsstring></argsstring>
        <name>m_running</name>
        <initializer>{ true }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="157" column="10" bodyfile="src/include/softrender.hpp" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1a6042d51210c551ccb511798592580022" prot="private" static="no" mutable="no">
        <type>SDL_Window *</type>
        <definition>SDL_Window* softrender::window_t::m_window</definition>
        <argsstring></argsstring>
        <name>m_window</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="159" column="16" bodyfile="src/include/softrender.hpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1acd5773b6c80e51d32678f0360d7fe7ff" prot="private" static="no" mutable="no">
        <type>SDL_Renderer *</type>
        <definition>SDL_Renderer* softrender::window_t::m_renderer</definition>
        <argsstring></argsstring>
        <name>m_renderer</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="160" column="18" bodyfile="src/include/softrender.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1ab5da848ee6e182639651cd6baf50dbda" prot="private" static="no" mutable="no">
        <type>SDL_Texture *</type>
        <definition>SDL_Texture* softrender::window_t::m_texture</definition>
        <argsstring></argsstring>
        <name>m_texture</name>
        <initializer>{ nullptr }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="161" column="17" bodyfile="src/include/softrender.hpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1a622149ad16d73507ce4ba05a217dbebe" prot="private" static="no" mutable="no">
        <type>std::function&lt; void(<ref refid="structsoftrender_1_1key__event__t" kindref="compound">key_event_t</ref> const  &amp;t_key_event)&gt;</type>
        <definition>std::function&lt;void(key_event_t const&amp; t_key_event)&gt; softrender::window_t::m_key_callback</definition>
        <argsstring></argsstring>
        <name>m_key_callback</name>
        <initializer>=
        [](<ref refid="structsoftrender_1_1key__event__t" kindref="compound">key_event_t</ref> const&amp;) noexcept-&gt;void{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="163" column="19" bodyfile="src/include/softrender.hpp" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsoftrender_1_1window__t_1a12a231535131dde13a7b75170e5cc902" prot="private" static="no" mutable="no">
        <type>std::function&lt; void(<ref refid="structsoftrender_1_1mouse__event__t" kindref="compound">mouse_event_t</ref> const  &amp;t_mouse_event)&gt;</type>
        <definition>std::function&lt;void(mouse_event_t const&amp; t_mouse_event)&gt; softrender::window_t::m_mouse_callback</definition>
        <argsstring></argsstring>
        <name>m_mouse_callback</name>
        <initializer>=
        [](<ref refid="structsoftrender_1_1mouse__event__t" kindref="compound">mouse_event_t</ref> const&amp;) noexcept-&gt;void{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="165" column="19" bodyfile="src/include/softrender.hpp" bodystart="165" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a89a1bea93f209217fb4c54e4d5e5df9f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::construct_canvas</definition>
        <argsstring>() -&gt; void</argsstring>
        <name>construct_canvas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="168" column="10" bodyfile="src/softrender.cpp" bodystart="325" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a8e2d06a2b85458ee0b8b9156ff0a2c85" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::initialize_sdl</definition>
        <argsstring>() -&gt; void</argsstring>
        <name>initialize_sdl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="169" column="10" bodyfile="src/softrender.cpp" bodystart="320" bodyend="323"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a578408fc92b352eeb7807b9883207223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>softrender::window_t::window_t</definition>
        <argsstring>()</argsstring>
        <name>window_t</name>
        <briefdescription>
<para>Constructs a window with width=640, height=480. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="175" column="5" bodyfile="src/softrender.cpp" bodystart="336" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a305403fb8b923e8d4c2811000b43898f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>softrender::window_t::window_t</definition>
        <argsstring>(int const t_width, int const t_height)</argsstring>
        <name>window_t</name>
        <param>
          <type>int const</type>
          <declname>t_width</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>t_height</declname>
        </param>
        <briefdescription>
<para>Constructs a window with <computeroutput>t_width</computeroutput> width and <computeroutput>t_height</computeroutput> height. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="180" column="5" bodyfile="src/softrender.cpp" bodystart="344" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a57348c74e2f5f709364cce9d66dc8118" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>softrender::window_t::~window_t</definition>
        <argsstring>() noexcept</argsstring>
        <name>~window_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="181" column="5" bodyfile="src/softrender.cpp" bodystart="352" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a58c57ba4bb09cd70a7441e5c63b0f413" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::width</definition>
        <argsstring>() const noexcept -&gt; int</argsstring>
        <name>width</name>
        <briefdescription>
<para>Get width of constructed window. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="186" column="11" bodyfile="src/softrender.cpp" bodystart="357" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a7d6fa3a7946bbdb8f10ea9b95c1c047f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::height</definition>
        <argsstring>() const noexcept -&gt; int</argsstring>
        <name>height</name>
        <briefdescription>
<para>Get height of constructed window. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="190" column="11" bodyfile="src/softrender.cpp" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a41a3c4738f536b849927565cc3a0ee21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::draw</definition>
        <argsstring>() -&gt; void</argsstring>
        <name>draw</name>
        <briefdescription>
<para>Draws everything to the screen and handles input. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If you press <ref refid="structsoftrender_1_1key_1a01dc95b5ba1439c755a39990efb39dee" kindref="member">key::vk_escape</ref> the application exits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="197" column="10" bodyfile="src/softrender.cpp" bodystart="367" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="group__unchecked__release_1gaf22433a4542aaf2b02276a6d25aaedf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::draw_point</definition>
        <argsstring>(int const t_i, int const t_j, pixel_t const &amp;t_pixel) -&gt; void</argsstring>
        <name>draw_point</name>
        <param>
          <type>int const</type>
          <declname>t_i</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>t_j</declname>
        </param>
        <param>
          <type><ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref> const &amp;</type>
          <declname>t_pixel</declname>
        </param>
        <briefdescription>
<para>Draws a point at coordinate (x=<computeroutput>t_j</computeroutput>, y=<computeroutput>t_i</computeroutput>). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">t_i</parametername>
</parameternamelist>
<parameterdescription>
<para>The line on which the pixel will be put. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">t_j</parametername>
</parameternamelist>
<parameterdescription>
<para>The column on which the pixel will be put. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">t_pixel</parametername>
</parameternamelist>
<parameterdescription>
<para>The color of the point. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="208" column="10" bodyfile="src/softrender.cpp" bodystart="379" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="group__unchecked__release_1gaae8983a3ab7afde5a377b9678792609e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::draw_point</definition>
        <argsstring>(point_t const &amp;t_point, pixel_t const &amp;t_pixel=pixel_t{}) -&gt; void</argsstring>
        <name>draw_point</name>
        <param>
          <type><ref refid="structsoftrender_1_1point__t" kindref="compound">point_t</ref> const &amp;</type>
          <declname>t_point</declname>
        </param>
        <param>
          <type><ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref> const &amp;</type>
          <declname>t_pixel</declname>
          <defval><ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref>{}</defval>
        </param>
        <briefdescription>
<para>Draws a point using a more traditional approach(x and y coordinates instead of lines and columns in a matrix). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="217" column="10" bodyfile="src/softrender.cpp" bodystart="385" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1abddb4a5d68408821b74b3e82224e1519" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::draw_line</definition>
        <argsstring>(point_t t_start, point_t t_end, pixel_t const &amp;t_pixel=pixel_t{}) -&gt; void</argsstring>
        <name>draw_line</name>
        <param>
          <type><ref refid="structsoftrender_1_1point__t" kindref="compound">point_t</ref></type>
          <declname>t_start</declname>
        </param>
        <param>
          <type><ref refid="structsoftrender_1_1point__t" kindref="compound">point_t</ref></type>
          <declname>t_end</declname>
        </param>
        <param>
          <type><ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref> const &amp;</type>
          <declname>t_pixel</declname>
          <defval><ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref>{}</defval>
        </param>
        <briefdescription>
<para>Draws a line from <computeroutput>t_start</computeroutput> to <computeroutput>t_end</computeroutput> with color <computeroutput>t_pixel</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="223" column="10" bodyfile="src/softrender.cpp" bodystart="391" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1af2db0ac4c66c549d1c45d0fabb82687b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::draw_triangle</definition>
        <argsstring>(vec2i const &amp;t_a, vec2i const &amp;t_b, vec2i const &amp;t_c, pixel_t const &amp;t_pixel=pixel_t{}) -&gt; void</argsstring>
        <name>draw_triangle</name>
        <param>
          <type><ref refid="namespacesoftrender_1af4daf194eae9f26cced450f41039a44e" kindref="member">vec2i</ref> const &amp;</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="namespacesoftrender_1af4daf194eae9f26cced450f41039a44e" kindref="member">vec2i</ref> const &amp;</type>
          <declname>t_b</declname>
        </param>
        <param>
          <type><ref refid="namespacesoftrender_1af4daf194eae9f26cced450f41039a44e" kindref="member">vec2i</ref> const &amp;</type>
          <declname>t_c</declname>
        </param>
        <param>
          <type><ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref> const &amp;</type>
          <declname>t_pixel</declname>
          <defval><ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref>{}</defval>
        </param>
        <briefdescription>
<para>Draws a triangle with given coordinates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="230" column="10" bodyfile="src/softrender.cpp" bodystart="435" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a167b8035b5acbfd780abe1dac0f6a039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::draw_rectangle</definition>
        <argsstring>(point_t const &amp;t_pos, int const t_width, int const t_height, pixel_t const &amp;t_pixel=pixel_t{}) -&gt; void</argsstring>
        <name>draw_rectangle</name>
        <param>
          <type><ref refid="structsoftrender_1_1point__t" kindref="compound">point_t</ref> const &amp;</type>
          <declname>t_pos</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>t_width</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>t_height</declname>
        </param>
        <param>
          <type><ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref> const &amp;</type>
          <declname>t_pixel</declname>
          <defval><ref refid="structsoftrender_1_1pixel__t" kindref="compound">pixel_t</ref>{}</defval>
        </param>
        <briefdescription>
<para>Draws a rectangle starting at (<computeroutput>t_pos.x</computeroutput>, <computeroutput>t_pos.y</computeroutput>) with width=<computeroutput>t_width</computeroutput> and height=<computeroutput>t_height</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="239" column="10" bodyfile="src/softrender.cpp" bodystart="472" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="group__unchecked__release_1ga10483a01c01a3ab63b9fbc78ddb05f60" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::closed</definition>
        <argsstring>() const noexcept -&gt; bool</argsstring>
        <name>closed</name>
        <briefdescription>
<para>Returns true if the window will close. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If you press ESCAPE the application terminates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="251" column="11" bodyfile="src/softrender.cpp" bodystart="489" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="group__unchecked__release_1gaa689741a240fbc6a257b63ed24350dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::operator()</definition>
        <argsstring>(int const t_i, int const t_j) -&gt; pixel_t &amp;</argsstring>
        <name>operator()</name>
        <param>
          <type>int const</type>
          <declname>t_i</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>t_j</declname>
        </param>
        <briefdescription>
<para>Access the rgba value at line=<computeroutput>t_i</computeroutput> and column=<computeroutput>t_j</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_i</parametername>
</parameternamelist>
<parameterdescription>
<para>Line of the inner rgba matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_j</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the inner rgba matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="261" column="11" bodyfile="src/softrender.cpp" bodystart="494" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="group__unchecked__release_1ga84f3a1118e6eeb9b4aaff801ccc8874f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::operator()</definition>
        <argsstring>(int const t_i, int const t_j) const -&gt; pixel_t const &amp;</argsstring>
        <name>operator()</name>
        <param>
          <type>int const</type>
          <declname>t_i</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>t_j</declname>
        </param>
        <briefdescription>
<para>Get a const reference to the rgba value at line=<computeroutput>t_i</computeroutput> and column=<computeroutput>t_j</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_i</parametername>
</parameternamelist>
<parameterdescription>
<para>Line of the inner rgba matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t_j</parametername>
</parameternamelist>
<parameterdescription>
<para>Column of the inner rgba matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="271" column="11" bodyfile="src/softrender.cpp" bodystart="505" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="group__canvas__manipulation_1ga5f2be04888560de972a8faf3257c361e" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::from_coord2d_to_matrix</definition>
        <argsstring>(point_t const &amp;t_point) const noexcept -&gt; int</argsstring>
        <name>from_coord2d_to_matrix</name>
        <param>
          <type><ref refid="structsoftrender_1_1point__t" kindref="compound">point_t</ref> const &amp;</type>
          <declname>t_point</declname>
        </param>
        <briefdescription>
<para>Returns corresponding position in the rgba matrix of a point <computeroutput>t_point</computeroutput> as if the canvas was a 2d matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>With this you could say:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">this-&gt;<ref refid="group__canvas__manipulation_1ga11392099f8c0ae8d55ffdd9f8306dbe4" kindref="member">canvas</ref>()[this-&gt;<ref refid="group__canvas__manipulation_1ga5f2be04888560de972a8faf3257c361e" kindref="member">from_coord2d_to_matrix</ref>({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>x=20,<sp/>y=30</highlight></codeline>
<codeline><highlight class="normal">})];</highlight></codeline>
</programlisting></para>
<para>which is equivalent to this:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">this-&gt;<ref refid="group__unchecked__release_1gaa689741a240fbc6a257b63ed24350dcc" kindref="member">operator()</ref>(x=20,<sp/>y=30);</highlight></codeline>
</programlisting></para>
<para>This will (hopefully) be useful for further optimizations for different algorithms(for example: draw_rect). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="297" column="11" bodyfile="src/softrender.cpp" bodystart="516" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="group__canvas__manipulation_1ga11392099f8c0ae8d55ffdd9f8306dbe4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::canvas</definition>
        <argsstring>() noexcept -&gt; std::vector&lt; pixel_t &gt; &amp;</argsstring>
        <name>canvas</name>
        <briefdescription>
<para>Returns the underlying canvas/matrix with rgba values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="305" column="11" bodyfile="src/softrender.cpp" bodystart="522" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="group__canvas__manipulation_1ga7bd4008d77748aeb3ecf8715224b79b4" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::canvas</definition>
        <argsstring>() const noexcept -&gt; std::vector&lt; pixel_t &gt; const &amp;</argsstring>
        <name>canvas</name>
        <briefdescription>
<para>Returns the underlying canvas/matrix with rgba values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="311" column="11" bodyfile="src/softrender.cpp" bodystart="527" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a3a27eae5aa7c31b9ce7b091714176e9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto softrender::window_t::set_on_key_press_callback</definition>
        <argsstring>(F t_function) -&gt; void</argsstring>
        <name>set_on_key_press_callback</name>
        <param>
          <type>F</type>
          <declname>t_function</declname>
        </param>
        <briefdescription>
<para>Provide a function that will be called on each key press. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_function</parametername>
</parameternamelist>
<parameterdescription>
<para>Must be a function accepting a const <ref refid="structsoftrender_1_1key__event__t" kindref="compound">key_event_t</ref> &amp;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="320" column="10" bodyfile="src/include/softrender.hpp" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1a85ca28d29f0631c042b186a4a67f0edf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto softrender::window_t::set_on_mouse_callback</definition>
        <argsstring>(F t_function) -&gt; void</argsstring>
        <name>set_on_mouse_callback</name>
        <param>
          <type>F</type>
          <declname>t_function</declname>
        </param>
        <briefdescription>
<para>Provide a function that will be called on each mouse button press/release. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t_function</parametername>
</parameternamelist>
<parameterdescription>
<para>Must be a function accepting a const <ref refid="structsoftrender_1_1mouse__event__t" kindref="compound">mouse_event_t</ref> &amp;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="333" column="10" bodyfile="src/include/softrender.hpp" bodystart="333" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classsoftrender_1_1window__t_1abc44f15fabc28d3c8f98c4bee966ee9f" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::window_t::get_mouse_position</definition>
        <argsstring>() const noexcept -&gt; point_t</argsstring>
        <name>get_mouse_position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A <ref refid="structsoftrender_1_1point__t" kindref="compound">point_t</ref> with the current mouse position relative to the window. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/softrender.hpp" line="342" column="11" bodyfile="src/softrender.cpp" bodystart="532" bodyend="535"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Use this to construct a window. </para>
    </briefdescription>
    <detaileddescription>
<para>This is just a wrapper around SDL to construct a surface from memory and blit it. </para>
    </detaileddescription>
    <location file="src/include/softrender.hpp" line="151" column="1" bodyfile="src/include/softrender.hpp" bodystart="150" bodyend="343"/>
    <listofallmembers>
      <member refid="group__canvas__manipulation_1ga11392099f8c0ae8d55ffdd9f8306dbe4" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>canvas</name></member>
      <member refid="group__canvas__manipulation_1ga7bd4008d77748aeb3ecf8715224b79b4" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>canvas</name></member>
      <member refid="group__unchecked__release_1ga10483a01c01a3ab63b9fbc78ddb05f60" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>closed</name></member>
      <member refid="classsoftrender_1_1window__t_1a89a1bea93f209217fb4c54e4d5e5df9f" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>construct_canvas</name></member>
      <member refid="classsoftrender_1_1window__t_1a41a3c4738f536b849927565cc3a0ee21" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>draw</name></member>
      <member refid="classsoftrender_1_1window__t_1abddb4a5d68408821b74b3e82224e1519" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>draw_line</name></member>
      <member refid="group__unchecked__release_1gaf22433a4542aaf2b02276a6d25aaedf1" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>draw_point</name></member>
      <member refid="group__unchecked__release_1gaae8983a3ab7afde5a377b9678792609e" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>draw_point</name></member>
      <member refid="classsoftrender_1_1window__t_1a167b8035b5acbfd780abe1dac0f6a039" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>draw_rectangle</name></member>
      <member refid="classsoftrender_1_1window__t_1af2db0ac4c66c549d1c45d0fabb82687b" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>draw_triangle</name></member>
      <member refid="group__canvas__manipulation_1ga5f2be04888560de972a8faf3257c361e" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>from_coord2d_to_matrix</name></member>
      <member refid="classsoftrender_1_1window__t_1abc44f15fabc28d3c8f98c4bee966ee9f" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>get_mouse_position</name></member>
      <member refid="classsoftrender_1_1window__t_1a7d6fa3a7946bbdb8f10ea9b95c1c047f" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>height</name></member>
      <member refid="classsoftrender_1_1window__t_1a8e2d06a2b85458ee0b8b9156ff0a2c85" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>initialize_sdl</name></member>
      <member refid="classsoftrender_1_1window__t_1a549973a71b40e61bc411a741469a3b1a" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_canvas</name></member>
      <member refid="classsoftrender_1_1window__t_1a4aa0cf682010f0a83e3b3946b25db760" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_height</name></member>
      <member refid="classsoftrender_1_1window__t_1a622149ad16d73507ce4ba05a217dbebe" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_key_callback</name></member>
      <member refid="classsoftrender_1_1window__t_1a12a231535131dde13a7b75170e5cc902" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_mouse_callback</name></member>
      <member refid="classsoftrender_1_1window__t_1acd5773b6c80e51d32678f0360d7fe7ff" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_renderer</name></member>
      <member refid="classsoftrender_1_1window__t_1a3b1172da8bd33ab3b6c418fc1a0e6281" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_running</name></member>
      <member refid="classsoftrender_1_1window__t_1ab5da848ee6e182639651cd6baf50dbda" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_texture</name></member>
      <member refid="classsoftrender_1_1window__t_1a4f367993c59ad9849a519eec914f4035" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_width</name></member>
      <member refid="classsoftrender_1_1window__t_1a6042d51210c551ccb511798592580022" prot="private" virt="non-virtual"><scope>softrender::window_t</scope><name>m_window</name></member>
      <member refid="group__unchecked__release_1gaa689741a240fbc6a257b63ed24350dcc" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>operator()</name></member>
      <member refid="group__unchecked__release_1ga84f3a1118e6eeb9b4aaff801ccc8874f" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>operator()</name></member>
      <member refid="classsoftrender_1_1window__t_1a3a27eae5aa7c31b9ce7b091714176e9a" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>set_on_key_press_callback</name></member>
      <member refid="classsoftrender_1_1window__t_1a85ca28d29f0631c042b186a4a67f0edf" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>set_on_mouse_callback</name></member>
      <member refid="classsoftrender_1_1window__t_1a58c57ba4bb09cd70a7441e5c63b0f413" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>width</name></member>
      <member refid="classsoftrender_1_1window__t_1a578408fc92b352eeb7807b9883207223" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>window_t</name></member>
      <member refid="classsoftrender_1_1window__t_1a305403fb8b923e8d4c2811000b43898f" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>window_t</name></member>
      <member refid="classsoftrender_1_1window__t_1a57348c74e2f5f709364cce9d66dc8118" prot="public" virt="non-virtual"><scope>softrender::window_t</scope><name>~window_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
