<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacesoftrender" kind="namespace" language="C++">
    <compoundname>softrender</compoundname>
    <innerclass refid="structsoftrender_1_1key" prot="public">softrender::key</innerclass>
    <innerclass refid="structsoftrender_1_1key__event__t" prot="public">softrender::key_event_t</innerclass>
    <innerclass refid="structsoftrender_1_1mouse__button" prot="public">softrender::mouse_button</innerclass>
    <innerclass refid="structsoftrender_1_1mouse__event__t" prot="public">softrender::mouse_event_t</innerclass>
    <innerclass refid="structsoftrender_1_1pixel__t" prot="public">softrender::pixel_t</innerclass>
    <innerclass refid="structsoftrender_1_1point__t" prot="public">softrender::point_t</innerclass>
    <innerclass refid="structsoftrender_1_1vec2" prot="public">softrender::vec2</innerclass>
    <innerclass refid="structsoftrender_1_1vec3" prot="public">softrender::vec3</innerclass>
    <innerclass refid="classsoftrender_1_1wavefront__model__t" prot="public">softrender::wavefront_model_t</innerclass>
    <innerclass refid="classsoftrender_1_1window__t" prot="public">softrender::window_t</innerclass>
    <innernamespace refid="namespacesoftrender_1_1colors">softrender::colors</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacesoftrender_1af4daf194eae9f26cced450f41039a44e" prot="public" static="no">
        <type><ref refid="structsoftrender_1_1vec2" kindref="compound">vec2</ref>&lt; int &gt;</type>
        <definition>using softrender::vec2i = typedef vec2&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>vec2i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="228" column="1" bodyfile="src/include/vec.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesoftrender_1a3024b719fa7d071e9ea46e7fe7771f37" prot="public" static="no">
        <type><ref refid="structsoftrender_1_1vec2" kindref="compound">vec2</ref>&lt; float &gt;</type>
        <definition>using softrender::vec2f = typedef vec2&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>vec2f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="229" column="1" bodyfile="src/include/vec.hpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesoftrender_1ac1e0bf91bbda4c419af787b565190159" prot="public" static="no">
        <type><ref refid="structsoftrender_1_1vec2" kindref="compound">vec2</ref>&lt; double &gt;</type>
        <definition>using softrender::vec2d = typedef vec2&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>vec2d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="230" column="1" bodyfile="src/include/vec.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesoftrender_1a0f4ff27fc129e76f00dea07755b7099a" prot="public" static="no">
        <type><ref refid="structsoftrender_1_1vec3" kindref="compound">vec3</ref>&lt; int &gt;</type>
        <definition>using softrender::vec3i = typedef vec3&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>vec3i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="232" column="1" bodyfile="src/include/vec.hpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesoftrender_1a9c075f6f6c3f4c5b00b7ba2def706d9a" prot="public" static="no">
        <type><ref refid="structsoftrender_1_1vec3" kindref="compound">vec3</ref>&lt; float &gt;</type>
        <definition>using softrender::vec3f = typedef vec3&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>vec3f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="233" column="1" bodyfile="src/include/vec.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacesoftrender_1a43d665a942e0b309fc1656eb173aa937" prot="public" static="no">
        <type><ref refid="structsoftrender_1_1vec3" kindref="compound">vec3</ref>&lt; double &gt;</type>
        <definition>using softrender::vec3d = typedef vec3&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>vec3d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="234" column="1" bodyfile="src/include/vec.hpp" bodystart="234" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacesoftrender_1a7cfd2dc2b780770d404c6fa17cfa4c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::error</definition>
        <argsstring>(std::string const &amp;) -&gt; void</argsstring>
        <name>error</name>
        <param>
          <type>std::string const &amp;</type>
          <defname>t_error</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/softrender.cpp" line="17" column="1" bodyfile="src/softrender.cpp" bodystart="307" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespacesoftrender_1a92f0e1563392fa48b5b1ded3dd2511f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto softrender::swap</definition>
        <argsstring>(point_t &amp;t_point) -&gt; void</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="structsoftrender_1_1point__t" kindref="compound">point_t</ref> &amp;</type>
          <declname>t_point</declname>
        </param>
        <briefdescription>
<para>Swaps <computeroutput>t_point.x</computeroutput> and <computeroutput>t_point.y</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Useful for draw_line and possibly for other future algorithms. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/softrender.cpp" line="315" column="1" bodyfile="src/softrender.cpp" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespacesoftrender_1a6cabb6b879b38a5518539aca7537b0ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto softrender::cross</definition>
        <argsstring>(vec3&lt; T &gt; const t_a, vec3&lt; T &gt; const t_b) noexcept -&gt; vec3&lt; T &gt;</argsstring>
        <name>cross</name>
        <param>
          <type><ref refid="structsoftrender_1_1vec3" kindref="compound">vec3</ref>&lt; T &gt; const</type>
          <declname>t_a</declname>
        </param>
        <param>
          <type><ref refid="structsoftrender_1_1vec3" kindref="compound">vec3</ref>&lt; T &gt; const</type>
          <declname>t_b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><formula id="0">\[ A \times B = \begin{vmatrix} x_A &amp; y_A &amp; z_A \\ x_B &amp; y_B &amp; z_B \\ i &amp; j &amp; k \end{vmatrix} = (y_A z_B - y_B z_A)\overrightarrow{i} - (z_B x_A - x_B z_A)\overrightarrow{j} + (x_A y_B - y_A x_B)\overrightarrow{k} = V( y_A z_B - y_B z_A, x_B z_A - z_B x_A, x_A y_B - y_A x_B ) \]</formula></para><para><simplesect kind="return"><para>The cross product of <computeroutput>t_a</computeroutput> and <computeroutput>t_b</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/vec.hpp" line="257" column="1" bodyfile="src/include/vec.hpp" bodystart="257" bodyend="263"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>All key functionality is in this namespace. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/keys.cpp" line="5" column="1"/>
  </compounddef>
</doxygen>
